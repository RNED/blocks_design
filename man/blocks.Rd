% Generated by roxygen2 (4.0.2): do not edit by hand
\name{blocks}
\alias{blocks}
\title{Block designs}
\usage{
blocks(treatments, replicates, blocklevels = NULL, searches = NULL,
  seed = NULL, jumps = NULL)
}
\arguments{
\item{treatments}{a list giving a partition of the total number of treatments into
sets where all treatments in the same set have the same replication.}

\item{replicates}{a list assigning the replication level of each set in the \code{treatments} list.}

\item{blocklevels}{a list of block levels where the first level is the number of main blocks and the remaining
levels, if any, are the succesive nested levels of a hierarchy of nested sub-blocks.
The default is an orthogonal main blocks design.}

\item{searches}{an optional integer parameter for the number of local optima searched during an optimization.
The default is the minimum of 32 or the ceiling of 4096 divided by the number of units.}

\item{seed}{an optional integer parameter for initializing the random number generator. The default
is a random integer seed in the range 1:100000.}

\item{jumps}{an optional integer parameter for the number of random jumps used to escape a local maxima in each stratum.
The default is a single jump.}
}
\value{
\item{Design}{Data frame showing the listing of treatments allocated to blocks}
\item{Plan}{Data frame showing a plan of treatments allocated to sub-plots within blocks}
\item{Incidences}{Blocks-by-treatments incidence matrices, one for each stratum of the design}
\item{Efficiencies}{Data frame showing the achieved efficiencies for each stratum of the design together with an A-efficiency upper-bound, where available}
\item{Searches_Log}{Data frames showing the number of searches for each progressive improvement in design efficiency for each stratum of the design}
\item{seed}{Numerical seed for random number generator}
\item{searches}{Maximum number of searches in each stratum}
\item{jumps}{Number of jumps to escape a local maxima in each stratum}
}
\description{
Constructs nested block designs for unstructured treatments with arbitrary replication,
not necessarily all equal, and arbitrary depth of nesting.
}
\details{
The \code{blocks} function optimizes the allocation of treatments to blocks for nested blocks designs where treatments
can have any arbitrary level of replication, not necessarily all equal, and blocks can have either a simple main blocks design or
a nested blocks design with any feasible depth of nesting.

Treatments are defined by a partition of the total required number of treatments into treatment sets where all treatments in the
same set have the same replication. The required sets are defined in the \code{treatments} list and the
required replication for each set is defined in the \code{replicates} list. The two lists must be the same length
and must be in matching order. Treatments are numbered consecutively according to the ordering of the treatment sets but
different sets with the same replication can be used if arbitrary numbering is required. Single replicate treatments sets are permitted provided
that not every treatment in the design is unreplicated.

The blocks design is defined by the \code{blocklevels} list, which defines the number of nested block levels in each stratum of the design.
The first level is the number of main blocks and the successive levels, if any, are the numbers of nested sub-blocks for each succesive stratum of
the design. The length of the list is the total number of strata in the design and blocks in any stratum are always equal in size or differ, at most,
by a single unit. The default value of the \code{blocklevels} list is the highest common factor of the replication levels.

The algorithm optimizes each blocks stratum individually, first optimizing the main blocks stratum and then optimizing any nested blocks
strata in turn from largest to smallest block size. The blocks of each new nested stratum are optimized within the blocks of each preceding stratum
therefore each nested blocks stratum is optimized conditionally with respect to any higher level strata in the design but
 unconditionally with respect to any lower level strata.

If the blocks in the top stratum have k replicates with v**2 equally replicated treatments in blocks of size v
and k <= 3 for any v, or k <= v+1 for prime or prime-power v, or k <= 4 for v = 10,
they are regular lattice blocks and are constructed algebraically. All other blocks are constructed by a D-optimal swapping algorithm.

The algorithm searches for a local maxima in each stratum by making improving swaps between blocks nested within existing blocks
until no further improving swaps can be found. If the \code{searches} parameter is greater than one the algorithm
then escapes the current local maxima by making one or more random jumps according to the \code{jumps} parameter and then finds another local maxima.
The process continues for the required number of searches and then the best overall design is returned.

The design outputs include the Design showing the allocation of blocks and treatments to plots, a Plan showing a schematic
layout of treatments in blocks, a set of Incidence matrices showing the incidences of treatments and blocks in each stratum,
an Efficiencies table showing the final achieved A- and D-efficiencies of the overall best design together with A-upper bounds, where available and
a Searches_Log showing the progress of the search algorithm for design improvements in each stratum of the design.
The Searches_Log shows the number of searches, the D-efficiency and the A-efficiency for each improving swap in the optimization process
 and can be useful for assessing whether further searches are needed or whether the \code{jumps} parameter setting
 is appropritae for a particular design search.

 Designs are fully randomised with small blocks randomised within large blocks and treatment plots randomised within blocks.

The \code{searches} parameter is the number of local optima searched during an optimization.
Increasing the number of searches may improve the efficiency of a design but
 will also increase the search time.

The \code{seed} parameter is an integer used to initialize the random number generator. The
 default is a random integer but any fixed positive integer can be used instead,if required.

Blocks and treatments are fully randomized within the constraints of a nested blocks design.
}
\examples{
# 3 treatments with 2 reps, 2 treatments with 4 reps, 4 treatments with 3 reps
# the hcf of the replication numbers is 1 and the default design is a completely randomized design
blocks(treatments=c(3,2,4),replicates=c(2,4,3))

# 50 treatments with 4 reps in 4 complete randomized blocks
blocks(treatments=50,replicates=4)

# as above but with 4 main blocks and 5 nested blocks within each main block
blocks(treatments=50,replicates=4,blocklevels=c(4,5))

# as above but with 20 additional single replicate treatments, one to each block
blocks(treatments=c(50,20),replicates=c(4,1),blocklevels=c(4,5))

# 64 treatments with 2 reps and 2 main blocks with five 2-level nested factors
 blocks(treatments=64,replicates=2,blocklevels=c(2,2,2,2,2,2),searches=4)

# concurrence matrices of 36 treatments with 3 reps and 3 main blocks with 6 nested blocks
crossprod(blocks(treatments=36,replicates=3,blocklevels=c(3,6))$Incidences[[2]])

# concurrence matrix for 13 treatments with 4 reps and 13 treatments with one rep in 13 blocks
crossprod(blocks(c(13,13),c(4,1),13,searches=100)$Incidences[[1]])
}
\references{
Sailer, M. O. (2013). crossdes: Construction of Crossover Designs. R package version 1.1-1. http://CRAN.R-project.org/package=crossdes
}

