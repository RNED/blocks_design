% Generated by roxygen2 (4.0.2): do not edit by hand
\name{blocks}
\alias{blocks}
\title{Block designs}
\usage{
blocks(treatments, replicates, blocklevels = NULL, searches = NULL,
  seed = NULL, jumps = NULL)
}
\arguments{
\item{treatments}{a list giving a partition of the total number of treatments into
sets where all treatments in the same set have the same replication.}

\item{replicates}{a list assigning the replication level of each set in the \code{treatments} list.}

\item{blocklevels}{a list of block levels where the first level is the number of main blocks and the remaining
levels, if any, are the succesive levels of a hierarchy of nested sub-blocks. The default is an orthogonal main blocks design.}

\item{searches}{an optional parameter for the maximum total number of local optima searched during an optimization.
The default is the smaller of 64 or the ceiling of 4096 divided by the number of units.}

\item{seed}{an optional integer parameter for initializing the random number generator. The default
is a random integer seed in the range 1:100000.}

\item{jumps}{an optional integer parameter for the number of random jumps used to escape a local maxima in each stratum.
The default is a single jump.}
}
\value{
\item{Design}{Data frame showing the optimized block and treatment factors in plot order}
\item{Plan}{Data frame showing the treatment allocation to blocks in the bottom stratum of the design}
\item{Incidences}{Blocks-by-treatments incidence matrices in each stratum of the design}
\item{Efficiencies}{The achieved A- and D-efficiencies for each stratum of the design together with an A-efficiency upper-bound, where available}
\item{Track}{Improvement in design efficiency for each improving search in each stratum of the design}
\item{seed}{Numerical seed for random number generator}
\item{searches}{Maximum number of searches in each stratum}
\item{jumps}{Number of jumps to escape a local maxima in each stratum}
}
\description{
Constructs nested block designs for unstructured treatments with arbitrary replication,
not necessarily all equal, and arbitrary depth of nesting.
}
\details{
The \code{blocks} function optimizes the allocation of treatments to blocks for nested blocks designs where treatments
can have any arbitrary level of replication, not necessarily all equal, and blocks can be either a simple main blocks design or
a nested blocks design with any feasible depth of nesting.

Treatments are defined by a partition of the total required number of treatments into sets where all the treatments in the
same set have the same replication. The required sets are defined in the \code{treatments} list and the
required replication for each set is defined in the \code{replicates} list. The two lists must be of the same length
and must be in matching order. Treatments are numbered consecutively according to the ordering of the treatment sets but
different sets with the same replication can be used if arbitrary numbering is required. Single replicate treatments sets are permitted provided
that not every treatment in the design is unreplicated.

The blocks design is defined by the \code{blocklevels} list which defines the number of nested block levels in each stratum of the design.
The first level is the number of main blocks and the successive levels, if any, are the numbers of nested sub-blocks for each succesive stratum of
the design. The length of the list is the total number of strata. The default setting for the \code{blocklevels} list is
the highest common factor of the replication levels which gives a single stratum main blocks design with the maximum possible
number of orthogonal main blocks.

Blocks in the same stratum are always equal in size or differ, at most, by a single experimental unit and
designs are fully randomised with small blocks randomised within large blocks and treatments randomised within blocks.

Main blocks designs with k replicates and v**2 equally replicated treatments in blocks of size v
where k <= 3 for any v, or k <= v+1 for prime or prime-power v, or k <= 4 for v = 10
are regular lattice blocks and are constructed algebraically. Lattice designs with prime-power number of treatments are constructed by
using the \code{\link[crossdes]{MOLS}} package.

All other block designs are constructed by the following swapping algorithm:

i)   Make improving swaps between the main blocks until no further improvement in D-optimality is possible \cr
ii)  If the number of searches is greater than one, escape the current local maxima by making the number of random jumps specified by the \code{jumps} parameter \cr
iii) Commence another search and repeat for the required number of searches retaining the best overall main block design after each search \cr
iv)  Repeat steps i-iii for the first nested blocks stratum, if any, with improving swaps between nested blocks constrained within the main blocks \cr
v)   Repeat step iv for each additional nested blocks stratum, taken in order, with improving swaps between nested blocks
     constrained within the blocks of the immediately preceeding stratum \cr

The design outputs for the optimized design include:

i)  A data frame showing the block and treatment factors in plot order\cr
ii) A data frame showing the bottom stratum blocks arranged as a plan layout \cr
iii) Incidence matrices showing the incidences of treatments and blocks in each stratum of the design \cr
iv) Efficiencies showing a table of the final achieved D- and A-efficiency factors in each stratum of the deign together with an A-efficiency bound where available \cr
v) A track of the design efficiency factors showing the actual search number and the A and D-efficency where an improvement was achieved,

The track of the design efficiency shows the number of searches needed for an improvement and might sometimes be useful for deciding if an increased
number of \code{searches} is needed or if the \code{jumps} parameter needs to be increased.

 The design outputs also include the total available number of searches, the randomization seed and the number of jumps between searches.
}
\examples{
# 3 treatments with 2 reps, 2 treatments with 4 reps, 4 treatments with 3 reps
# the hcf of the replication numbers is 1 and the default design is a completely randomized design
blocks(treatments=c(3,2,4),replicates=c(2,4,3))

# 50 treatments with 4 reps in 4 complete randomized blocks
blocks(treatments=50,replicates=4)

# as above but with 4 main blocks and 5 nested blocks within each main block
blocks(treatments=50,replicates=4,blocklevels=c(4,5))

# as above but with 20 additional single replicate treatments, one to each block
blocks(treatments=c(50,20),replicates=c(4,1),blocklevels=c(4,5))

# 64 treatments with 2 reps and 2 main blocks with five 2-level nested factors
 blocks(treatments=64,replicates=2,blocklevels=c(2,2,2,2,2,2),searches=4)

# concurrence matrices of 36 treatments with 3 reps and 3 main blocks with 6 nested blocks
crossprod(blocks(treatments=36,replicates=3,blocklevels=c(3,6))$Incidences[[2]])

# concurrence matrix for 13 treatments with 4 reps and 13 treatments with one rep in 13 blocks
crossprod(blocks(c(13,13),c(4,1),13,searches=100)$Incidences[[1]])
}
\references{
Sailer, M. O. (2013). crossdes: Construction of Crossover Designs. R package version 1.1-1. http://CRAN.R-project.org/package=crossdes
}

